const { Server } = require("socket.io");
const { createServer } = require("http");
const debug = require("debug")("sharewe-server:server");
const cors = require("cors");
const app = require("../app");

app.use(
  cors({
    origin: [
      "http://172.30.1.74:3000",
      "http://localhost:3000",
      "http://sharewefile.com",
      "http://www.sharewefile.com",
    ],
  })
);

const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: [
      "http://172.30.1.74:3000",
      "http://localhost:3000",
      "http://sharewefile.com",
      "http://www.sharewefile.com",
    ],
  },
});

const port = process.env.PORT || "8080";
httpServer.listen(port, () => {
  console.log("listening on *:" + port);
});
httpServer.on("error", onError);
httpServer.on("listening", onListening);

io.on("connection", socket => {
  console.log("server socket is connected", socket.id);
  socket.on("client 1 SDP", msg1 => {
    console.log(`${msg1}`);
    io.emit("receiving from client 1", msg1, socket.id);
  });
  socket.on("client 2 SDP", msg2 => {
    console.log(`${msg2}`);
    io.emit("receiving from client 2", msg2);
  });
  socket.on("URL", url => {
    console.log(`${url}`);
    io.emit("URL", url);
  });
});

io.on("connection", socket => {
  socket.on("client 1 ICE", msg => {
    console.log(`${msg}`);
    io.emit("ICE from client 1", msg);
  });
  socket.on("client 2 ICE", msg3 => {
    console.log(`${msg3}`);
    io.emit("ICE from client 2", msg3);
  });
});

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = httpServer.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
